class Blitz
class Curl # :nodoc:
# Use this to run a sprint against your app. The return values include the response
# time, the region from which the sprint was run along with the full request
# and response headers and the response body.
class Sprint
    # Represents the request object generated by the sprint. Contains all
    # of the headers and POST/PUT data, if any.
    class Request
        # The entire request line (GET / HTTP/1.1, for example)
        attr_reader :line
        
        # The method used in the request
        attr_reader :method
        
        # The URL, including path, query arguments and hash fragments
        attr_reader :url
        
        # All of the request headers (as a Hash of name/value pairs)
        attr_reader :headers
        
        # POST/PUT content, if any
        attr_reader :content
        
        def initialize json # :nodoc:
            @line = json['line']
            @method = json['method']
            @url = json['url']
            @content = json['content'].unpack('m')[0]
            @headers = json['headers']
        end
    end
    
    # Represents the response object generated by the sprint. Contains all
    # of the headers and the response payload, if any.
    class Response
        # The entire response line (HTTP/1.1 200 Okay, for example)
        attr_reader :line
        
        # The response status
        attr_reader :status
        
        # The message in the response line
        attr_reader :message
        
        # All of the response headers (as a Hash of name/value pairs)
        attr_reader :headers
        
        # The response content, if any
        attr_reader :content
        
        def initialize json # :nodoc:
            @line = json['line']
            @status = json['status']
            @message = json['message']
            @content = json['content'].unpack('m')[0]
            @headers = json['headers']
        end        
    end
    
    # Represents a step in the transaction (even if there's only one). Each
    # step contains the request and response objects as well as the stats
    # associated with them.
    class Step
        # The time it took for the TCP connection
        attr_reader :connect
        
        # The time it took for this step (includes the connect, send and receive)
        attr_reader :duration
        
        # The request object containing the URL, headers and content, if any
        attr_reader :request
        
        # The response object containing the status code, headers and content, if any
        attr_reader :response
        
        def initialize json # :nodoc:
            @connect = json['connect']
            @duration = json['duration']
            @request = Request.new json['request'] if json['request']
            @response = Response.new json['response'] if json['response']
        end
    end
    
    # Contains the result from a successful sprint
    class Result
        # The region from which this sprint was executed
        attr_reader :region
        
        # The overall response time for the entire transaction
        attr_reader :duration
        
        # Stats about the individual steps
        attr_reader :steps
        
        def initialize json # :nodoc:
            result = json['result']
            @region = result['region']
            @duration = result['duration']
            @steps = result['steps'].map { |step| Step.new step }
        end        
    end
    
    # The primary method to execute a sprint from region. This method supports
    # all of the arguments that the blitz bar supports. For example:
    #
    #  result = Blitz::Curl.parse('-r california www.example.com').execute
    def execute
        queue
        result
    end
    
    def queue # :nodoc:
        args.delete 'pattern'
        args.delete :pattern

        res = Command::API.client.curl_execute args
        raise Error.new(res) if res['error']
        @job_id = res['job_id']
        @region = res['region']
    end
    
    attr_reader :job_id # :nodoc:
    attr_reader :region # :nodoc:
    attr_reader :args # :nodoc:
    
    def initialize args # :nodoc:
        @args = args
    end
    
    def result # :nodoc:
        while true
            sleep 2.0
            
            job = Command::API.client.job_status job_id
            if job['error']
                raise Error
            end

            result = job['result']
            next if job['status'] == 'queued'
            next if job['status'] == 'running' and not result

            raise Error if not result

            error = result['error']
            if error
                if error == 'dns'
                    raise Error::DNS.new(result)
                elsif error == 'connect'
                    raise Error::Connect.new(result)
                elsif error == 'timeout'
                    raise Error::Timeout.new(result)
                elsif error == 'parse'
                    raise Error::Parse.new(result)
                elsif error == 'assert'
                    raise Error::Status.new(result)
                else
                    raise Error
                end
            end
            
            return Result.new(job)
        end
    end
    
    def abort # :nodoc:
        Command::API.client.abort_job job_id rescue nil
    end
end
end # Curl
end # Blitz
